//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

using CameraShop.Properties;

namespace CameraShop
{
	#pragma warning disable 1591

	/// <summary>
	///   Represents a strongly typed in-memory cache of data.
	/// </summary>
	[Serializable()]
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[XmlSchemaProvider("GetTypedDataSetSchema")]
	[XmlRoot("CameraMarketDataSet")]
	[HelpKeyword("vs.data.DataSet")]
	public partial class CameraMarketDataSet : DataSet
	{
		private DeviceDataTable tableDevice;

		private DeviceColorProfileDataTable tableDeviceColorProfile;

		private DeviceShellDataTable tableDeviceShell;

		private DeviceSystemDataTable tableDeviceSystem;

		private DeviceTypesDataTable tableDeviceTypes;

		private DiveceViewFinderDataTable tableDiveceViewFinder;

		private BasketDataTable tableBasket;

		private SchemaSerializationMode _schemaSerializationMode =
				SchemaSerializationMode.IncludeSchema;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public CameraMarketDataSet()
		{
			this.BeginInit();
			this.InitClass();

			CollectionChangeEventHandler schemaChangedHandler =
					new CollectionChangeEventHandler(this.SchemaChanged);

			base.Tables.CollectionChanged    += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected CameraMarketDataSet(SerializationInfo info, StreamingContext context) :
				base(info, context, false)
		{
			if ((this.IsBinarySerialized(info, context) == true))
			{
				this.InitVars(false);

				CollectionChangeEventHandler schemaChangedHandler1 =
						new CollectionChangeEventHandler(this.SchemaChanged);

				this.Tables.CollectionChanged    += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;

				return;
			}

			string strSchema = ((string) (info.GetValue("XmlSchema", typeof(string))));

			if ((this.DetermineSchemaSerializationMode(info, context)
				== SchemaSerializationMode.IncludeSchema))
			{
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));

				if ((ds.Tables["Device"] != null))
				{
					base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
				}

				if ((ds.Tables["DeviceColorProfile"] != null))
				{
					base.Tables
					.Add(new DeviceColorProfileDataTable(ds.Tables["DeviceColorProfile"]));
				}

				if ((ds.Tables["DeviceShell"] != null))
				{
					base.Tables.Add(new DeviceShellDataTable(ds.Tables["DeviceShell"]));
				}

				if ((ds.Tables["DeviceSystem"] != null))
				{
					base.Tables.Add(new DeviceSystemDataTable(ds.Tables["DeviceSystem"]));
				}

				if ((ds.Tables["DeviceTypes"] != null))
				{
					base.Tables.Add(new DeviceTypesDataTable(ds.Tables["DeviceTypes"]));
				}

				if ((ds.Tables["DiveceViewFinder"] != null))
				{
					base.Tables.Add(new DiveceViewFinderDataTable(ds.Tables["DiveceViewFinder"]));
				}

				if ((ds.Tables["Basket"] != null))
				{
					base.Tables.Add(new BasketDataTable(ds.Tables["Basket"]));
				}

				this.DataSetName        = ds.DataSetName;
				this.Prefix             = ds.Prefix;
				this.Namespace          = ds.Namespace;
				this.Locale             = ds.Locale;
				this.CaseSensitive      = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, MissingSchemaAction.Add);
				this.InitVars();
			} else
			{
				this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
			}

			this.GetSerializationData(info, context);

			CollectionChangeEventHandler schemaChangedHandler =
					new CollectionChangeEventHandler(this.SchemaChanged);

			base.Tables.CollectionChanged    += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DeviceDataTable Device
		{
			get
			{
				return this.tableDevice;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DeviceColorProfileDataTable DeviceColorProfile
		{
			get
			{
				return this.tableDeviceColorProfile;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DeviceShellDataTable DeviceShell
		{
			get
			{
				return this.tableDeviceShell;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DeviceSystemDataTable DeviceSystem
		{
			get
			{
				return this.tableDeviceSystem;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DeviceTypesDataTable DeviceTypes
		{
			get
			{
				return this.tableDeviceTypes;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DiveceViewFinderDataTable DiveceViewFinder
		{
			get
			{
				return this.tableDiveceViewFinder;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public BasketDataTable Basket
		{
			get
			{
				return this.tableBasket;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(true)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
		public override SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public override DataSet Clone()
		{
			CameraMarketDataSet cln = ((CameraMarketDataSet) (base.Clone()));
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;

			return cln;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected override bool ShouldSerializeTables()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected override bool ShouldSerializeRelations()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected override void ReadXmlSerializable(XmlReader reader)
		{
			if ((this.DetermineSchemaSerializationMode(reader)
				== SchemaSerializationMode.IncludeSchema))
			{
				this.Reset();
				DataSet ds = new DataSet();
				ds.ReadXml(reader);

				if ((ds.Tables["Device"] != null))
				{
					base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
				}

				if ((ds.Tables["DeviceColorProfile"] != null))
				{
					base.Tables
					.Add(new DeviceColorProfileDataTable(ds.Tables["DeviceColorProfile"]));
				}

				if ((ds.Tables["DeviceShell"] != null))
				{
					base.Tables.Add(new DeviceShellDataTable(ds.Tables["DeviceShell"]));
				}

				if ((ds.Tables["DeviceSystem"] != null))
				{
					base.Tables.Add(new DeviceSystemDataTable(ds.Tables["DeviceSystem"]));
				}

				if ((ds.Tables["DeviceTypes"] != null))
				{
					base.Tables.Add(new DeviceTypesDataTable(ds.Tables["DeviceTypes"]));
				}

				if ((ds.Tables["DiveceViewFinder"] != null))
				{
					base.Tables.Add(new DiveceViewFinderDataTable(ds.Tables["DiveceViewFinder"]));
				}

				if ((ds.Tables["Basket"] != null))
				{
					base.Tables.Add(new BasketDataTable(ds.Tables["Basket"]));
				}

				this.DataSetName        = ds.DataSetName;
				this.Prefix             = ds.Prefix;
				this.Namespace          = ds.Namespace;
				this.Locale             = ds.Locale;
				this.CaseSensitive      = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, MissingSchemaAction.Add);
				this.InitVars();
			} else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected override XmlSchema GetSchemaSerializable()
		{
			MemoryStream stream = new MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;

			return XmlSchema.Read(new XmlTextReader(stream), null);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal void InitVars()
		{
			this.InitVars(true);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal void InitVars(bool initTable)
		{
			this.tableDevice = ((DeviceDataTable) (base.Tables["Device"]));

			if ((initTable == true))
			{
				if ((this.tableDevice != null))
				{
					this.tableDevice.InitVars();
				}
			}

			this.tableDeviceColorProfile =
					((DeviceColorProfileDataTable) (base.Tables["DeviceColorProfile"]));

			if ((initTable == true))
			{
				if ((this.tableDeviceColorProfile != null))
				{
					this.tableDeviceColorProfile.InitVars();
				}
			}

			this.tableDeviceShell = ((DeviceShellDataTable) (base.Tables["DeviceShell"]));

			if ((initTable == true))
			{
				if ((this.tableDeviceShell != null))
				{
					this.tableDeviceShell.InitVars();
				}
			}

			this.tableDeviceSystem = ((DeviceSystemDataTable) (base.Tables["DeviceSystem"]));

			if ((initTable == true))
			{
				if ((this.tableDeviceSystem != null))
				{
					this.tableDeviceSystem.InitVars();
				}
			}

			this.tableDeviceTypes = ((DeviceTypesDataTable) (base.Tables["DeviceTypes"]));

			if ((initTable == true))
			{
				if ((this.tableDeviceTypes != null))
				{
					this.tableDeviceTypes.InitVars();
				}
			}

			this.tableDiveceViewFinder =
					((DiveceViewFinderDataTable) (base.Tables["DiveceViewFinder"]));

			if ((initTable == true))
			{
				if ((this.tableDiveceViewFinder != null))
				{
					this.tableDiveceViewFinder.InitVars();
				}
			}

			this.tableBasket = ((BasketDataTable) (base.Tables["Basket"]));

			if ((initTable == true))
			{
				if ((this.tableBasket != null))
				{
					this.tableBasket.InitVars();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitClass()
		{
			this.DataSetName             = "CameraMarketDataSet";
			this.Prefix                  = "";
			this.Namespace               = "http://tempuri.org/CameraMarketDataSet.xsd";
			this.EnforceConstraints      = true;
			this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
			this.tableDevice             = new DeviceDataTable();
			base.Tables.Add(this.tableDevice);
			this.tableDeviceColorProfile = new DeviceColorProfileDataTable();
			base.Tables.Add(this.tableDeviceColorProfile);
			this.tableDeviceShell = new DeviceShellDataTable();
			base.Tables.Add(this.tableDeviceShell);
			this.tableDeviceSystem = new DeviceSystemDataTable();
			base.Tables.Add(this.tableDeviceSystem);
			this.tableDeviceTypes = new DeviceTypesDataTable();
			base.Tables.Add(this.tableDeviceTypes);
			this.tableDiveceViewFinder = new DiveceViewFinderDataTable();
			base.Tables.Add(this.tableDiveceViewFinder);
			this.tableBasket = new BasketDataTable();
			base.Tables.Add(this.tableBasket);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDevice()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDeviceColorProfile()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDeviceShell()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDeviceSystem()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDeviceTypes()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeDiveceViewFinder()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private bool ShouldSerializeBasket()
		{
			return false;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void SchemaChanged(object sender, CollectionChangeEventArgs e)
		{
			if ((e.Action == CollectionChangeAction.Remove))
			{
				this.InitVars();
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
		{
			CameraMarketDataSet  ds       = new CameraMarketDataSet();
			XmlSchemaComplexType type     = new XmlSchemaComplexType();
			XmlSchemaSequence    sequence = new XmlSchemaSequence();
			XmlSchemaAny         any      = new XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			XmlSchema dsSchema = ds.GetSchemaSerializable();

			if (xs.Contains(dsSchema.TargetNamespace))
			{
				MemoryStream s1 = new MemoryStream();
				MemoryStream s2 = new MemoryStream();

				try
				{
					XmlSchema schema = null;
					dsSchema.Write(s1);

					for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
							schemas.MoveNext();)
					{
						schema = ((XmlSchema) (schemas.Current));
						s2.SetLength(0);
						schema.Write(s2);

						if ((s1.Length == s2.Length))
						{
							s1.Position = 0;
							s2.Position = 0;

							for (;
									((s1.Position     != s1.Length)
									&& (s1.ReadByte() == s2.ReadByte()));)
							{
								;
							}

							if ((s1.Position == s1.Length))
							{
								return type;
							}
						}
					}
				} finally
				{
					if ((s1 != null))
					{
						s1.Close();
					}

					if ((s2 != null))
					{
						s2.Close();
					}
				}
			}

			xs.Add(dsSchema);

			return type;
		}

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DeviceRowChangeEventHandler(object sender, DeviceRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DeviceColorProfileRowChangeEventHandler(
				object                           sender,
				DeviceColorProfileRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DeviceShellRowChangeEventHandler(
				object                    sender,
				DeviceShellRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DeviceSystemRowChangeEventHandler(
				object                     sender,
				DeviceSystemRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DeviceTypesRowChangeEventHandler(
				object                    sender,
				DeviceTypesRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void DiveceViewFinderRowChangeEventHandler(
				object                         sender,
				DiveceViewFinderRowChangeEvent e);

		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public delegate void BasketRowChangeEventHandler(object sender, BasketRowChangeEvent e);

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DeviceDataTable : TypedTableBase<DeviceRow>
		{
			private DataColumn columnID;

			private DataColumn columnName;

			private DataColumn columnCategory;

			private DataColumn columnSensorSize;

			private DataColumn columnSystem;

			private DataColumn columnVideoRecord;

			private DataColumn columnMonitorMount;

			private DataColumn columnMegapixel;

			private DataColumn columnPrice;

			private DataColumn columnRawPhoto;

			private DataColumn columnCameraLight;

			private DataColumn columnColorProfile;

			private DataColumn columnOptionalStabil;

			private DataColumn columnViewFinder;

			private DataColumn columnShell;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceDataTable()
			{
				this.TableName = "Device";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DeviceDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn CategoryColumn
			{
				get
				{
					return this.columnCategory;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn SensorSizeColumn
			{
				get
				{
					return this.columnSensorSize;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn SystemColumn
			{
				get
				{
					return this.columnSystem;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn VideoRecordColumn
			{
				get
				{
					return this.columnVideoRecord;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn MonitorMountColumn
			{
				get
				{
					return this.columnMonitorMount;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn MegapixelColumn
			{
				get
				{
					return this.columnMegapixel;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn PriceColumn
			{
				get
				{
					return this.columnPrice;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn RawPhotoColumn
			{
				get
				{
					return this.columnRawPhoto;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn CameraLightColumn
			{
				get
				{
					return this.columnCameraLight;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ColorProfileColumn
			{
				get
				{
					return this.columnColorProfile;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn OptionalStabilColumn
			{
				get
				{
					return this.columnOptionalStabil;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ViewFinderColumn
			{
				get
				{
					return this.columnViewFinder;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ShellColumn
			{
				get
				{
					return this.columnShell;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRow this[int index]
			{
				get
				{
					return ((DeviceRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceRowChangeEventHandler DeviceRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceRowChangeEventHandler DeviceRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceRowChangeEventHandler DeviceRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceRowChangeEventHandler DeviceRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDeviceRow(DeviceRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRow AddDeviceRow(string Name,
										string   Category,
										string   SensorSize,
										string   System,
										bool     VideoRecord,
										int      MonitorMount,
										decimal  Megapixel,
										decimal  Price,
										bool     RawPhoto,
										bool     CameraLight,
										string   ColorProfile,
										string   OptionalStabil,
										string   ViewFinder,
										string   Shell)
			{
				DeviceRow rowDeviceRow = ((DeviceRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													Name,
													Category,
													SensorSize,
													System,
													VideoRecord,
													MonitorMount,
													Megapixel,
													Price,
													RawPhoto,
													CameraLight,
													ColorProfile,
													OptionalStabil,
													ViewFinder,
													Shell
											};

				rowDeviceRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDeviceRow);

				return rowDeviceRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRow FindByID(int ID)
			{
				return ((DeviceRow) (this.Rows.Find(new object[]
													{
															ID
													})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DeviceDataTable cln = ((DeviceDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DeviceDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID             = base.Columns["ID"];
				this.columnName           = base.Columns["Name"];
				this.columnCategory       = base.Columns["Category"];
				this.columnSensorSize     = base.Columns["SensorSize"];
				this.columnSystem         = base.Columns["System"];
				this.columnVideoRecord    = base.Columns["VideoRecord"];
				this.columnMonitorMount   = base.Columns["MonitorMount"];
				this.columnMegapixel      = base.Columns["Megapixel"];
				this.columnPrice          = base.Columns["Price"];
				this.columnRawPhoto       = base.Columns["RawPhoto"];
				this.columnCameraLight    = base.Columns["CameraLight"];
				this.columnColorProfile   = base.Columns["ColorProfile"];
				this.columnOptionalStabil = base.Columns["OptionalStabil"];
				this.columnViewFinder     = base.Columns["ViewFinder"];
				this.columnShell          = base.Columns["Shell"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
				base.Columns.Add(this.columnName);

				this.columnCategory =
						new DataColumn("Category", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnCategory);

				this.columnSensorSize =
						new DataColumn("SensorSize", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnSensorSize);

				this.columnSystem =
						new DataColumn("System", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnSystem);

				this.columnVideoRecord =
						new DataColumn("VideoRecord", typeof(bool), null, MappingType.Element);

				base.Columns.Add(this.columnVideoRecord);

				this.columnMonitorMount =
						new DataColumn("MonitorMount", typeof(int), null, MappingType.Element);

				base.Columns.Add(this.columnMonitorMount);

				this.columnMegapixel =
						new DataColumn("Megapixel", typeof(decimal), null, MappingType.Element);

				base.Columns.Add(this.columnMegapixel);

				this.columnPrice =
						new DataColumn("Price", typeof(decimal), null, MappingType.Element);

				base.Columns.Add(this.columnPrice);

				this.columnRawPhoto =
						new DataColumn("RawPhoto", typeof(bool), null, MappingType.Element);

				base.Columns.Add(this.columnRawPhoto);

				this.columnCameraLight =
						new DataColumn("CameraLight", typeof(bool), null, MappingType.Element);

				base.Columns.Add(this.columnCameraLight);

				this.columnColorProfile =
						new DataColumn("ColorProfile", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnColorProfile);

				this.columnOptionalStabil =
						new DataColumn("OptionalStabil", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnOptionalStabil);

				this.columnViewFinder =
						new DataColumn("ViewFinder", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnViewFinder);

				this.columnShell =
						new DataColumn("Shell", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnShell);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement         = true;
				this.columnID.AllowDBNull           = false;
				this.columnID.Unique                = true;
				this.columnName.MaxLength           = 255;
				this.columnCategory.MaxLength       = 255;
				this.columnSensorSize.MaxLength     = 255;
				this.columnSystem.MaxLength         = 255;
				this.columnColorProfile.MaxLength   = 255;
				this.columnOptionalStabil.MaxLength = 255;
				this.columnViewFinder.MaxLength     = 255;
				this.columnShell.MaxLength          = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRow NewDeviceRow()
			{
				return ((DeviceRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DeviceRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DeviceRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DeviceRowChanged != null))
				{
					this.DeviceRowChanged(this,
										new DeviceRowChangeEvent(((DeviceRow) (e.Row)), e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DeviceRowChanging != null))
				{
					this.DeviceRowChanging(this,
											new DeviceRowChangeEvent(((DeviceRow) (e.Row)),
																	e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DeviceRowDeleted != null))
				{
					this.DeviceRowDeleted(this,
										new DeviceRowChangeEvent(((DeviceRow) (e.Row)), e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DeviceRowDeleting != null))
				{
					this.DeviceRowDeleting(this,
											new DeviceRowChangeEvent(((DeviceRow) (e.Row)),
																	e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDeviceRow(DeviceRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DeviceDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DeviceColorProfileDataTable : TypedTableBase<DeviceColorProfileRow>
		{
			private DataColumn columnID;

			private DataColumn columnColorProfileName;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileDataTable()
			{
				this.TableName = "DeviceColorProfile";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceColorProfileDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DeviceColorProfileDataTable(SerializationInfo info, StreamingContext context)
					:
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ColorProfileNameColumn
			{
				get
				{
					return this.columnColorProfileName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRow this[int index]
			{
				get
				{
					return ((DeviceColorProfileRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceColorProfileRowChangeEventHandler DeviceColorProfileRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceColorProfileRowChangeEventHandler DeviceColorProfileRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceColorProfileRowChangeEventHandler DeviceColorProfileRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceColorProfileRowChangeEventHandler DeviceColorProfileRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDeviceColorProfileRow(DeviceColorProfileRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRow AddDeviceColorProfileRow(string ColorProfileName)
			{
				DeviceColorProfileRow rowDeviceColorProfileRow =
						((DeviceColorProfileRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													ColorProfileName
											};

				rowDeviceColorProfileRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDeviceColorProfileRow);

				return rowDeviceColorProfileRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRow FindByID(int ID)
			{
				return ((DeviceColorProfileRow) (this.Rows.Find(new object[]
																{
																		ID
																})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DeviceColorProfileDataTable cln = ((DeviceColorProfileDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DeviceColorProfileDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID               = base.Columns["ID"];
				this.columnColorProfileName = base.Columns["ColorProfileName"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);

				this.columnColorProfileName =
						new DataColumn("ColorProfileName", typeof(string), null,
										MappingType.Element);

				base.Columns.Add(this.columnColorProfileName);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement           = true;
				this.columnID.AutoIncrementSeed       = -1;
				this.columnID.AutoIncrementStep       = -1;
				this.columnID.AllowDBNull             = false;
				this.columnID.Unique                  = true;
				this.columnColorProfileName.MaxLength = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRow NewDeviceColorProfileRow()
			{
				return ((DeviceColorProfileRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DeviceColorProfileRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DeviceColorProfileRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DeviceColorProfileRowChanged != null))
				{
					this.DeviceColorProfileRowChanged(this,
													new
															DeviceColorProfileRowChangeEvent(((DeviceColorProfileRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DeviceColorProfileRowChanging != null))
				{
					this.DeviceColorProfileRowChanging(this,
														new
																DeviceColorProfileRowChangeEvent(((DeviceColorProfileRow) (e.Row)),
																								e
																									.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DeviceColorProfileRowDeleted != null))
				{
					this.DeviceColorProfileRowDeleted(this,
													new
															DeviceColorProfileRowChangeEvent(((DeviceColorProfileRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DeviceColorProfileRowDeleting != null))
				{
					this.DeviceColorProfileRowDeleting(this,
														new
																DeviceColorProfileRowChangeEvent(((DeviceColorProfileRow) (e.Row)),
																								e
																									.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDeviceColorProfileRow(DeviceColorProfileRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DeviceColorProfileDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DeviceShellDataTable : TypedTableBase<DeviceShellRow>
		{
			private DataColumn columnID;

			private DataColumn columnShellTypeName;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellDataTable()
			{
				this.TableName = "DeviceShell";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceShellDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DeviceShellDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ShellTypeNameColumn
			{
				get
				{
					return this.columnShellTypeName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRow this[int index]
			{
				get
				{
					return ((DeviceShellRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceShellRowChangeEventHandler DeviceShellRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceShellRowChangeEventHandler DeviceShellRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceShellRowChangeEventHandler DeviceShellRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceShellRowChangeEventHandler DeviceShellRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDeviceShellRow(DeviceShellRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRow AddDeviceShellRow(string ShellTypeName)
			{
				DeviceShellRow rowDeviceShellRow = ((DeviceShellRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													ShellTypeName
											};

				rowDeviceShellRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDeviceShellRow);

				return rowDeviceShellRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRow FindByID(int ID)
			{
				return ((DeviceShellRow) (this.Rows.Find(new object[]
														{
																ID
														})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DeviceShellDataTable cln = ((DeviceShellDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DeviceShellDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID            = base.Columns["ID"];
				this.columnShellTypeName = base.Columns["ShellTypeName"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);

				this.columnShellTypeName =
						new DataColumn("ShellTypeName", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnShellTypeName);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement        = true;
				this.columnID.AutoIncrementSeed    = -1;
				this.columnID.AutoIncrementStep    = -1;
				this.columnID.AllowDBNull          = false;
				this.columnID.Unique               = true;
				this.columnShellTypeName.MaxLength = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRow NewDeviceShellRow()
			{
				return ((DeviceShellRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DeviceShellRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DeviceShellRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DeviceShellRowChanged != null))
				{
					this.DeviceShellRowChanged(this,
												new
														DeviceShellRowChangeEvent(((DeviceShellRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DeviceShellRowChanging != null))
				{
					this.DeviceShellRowChanging(this,
												new
														DeviceShellRowChangeEvent(((DeviceShellRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DeviceShellRowDeleted != null))
				{
					this.DeviceShellRowDeleted(this,
												new
														DeviceShellRowChangeEvent(((DeviceShellRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DeviceShellRowDeleting != null))
				{
					this.DeviceShellRowDeleting(this,
												new
														DeviceShellRowChangeEvent(((DeviceShellRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDeviceShellRow(DeviceShellRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DeviceShellDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DeviceSystemDataTable : TypedTableBase<DeviceSystemRow>
		{
			private DataColumn columnID;

			private DataColumn columnSystemName;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemDataTable()
			{
				this.TableName = "DeviceSystem";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceSystemDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DeviceSystemDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn SystemNameColumn
			{
				get
				{
					return this.columnSystemName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRow this[int index]
			{
				get
				{
					return ((DeviceSystemRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceSystemRowChangeEventHandler DeviceSystemRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceSystemRowChangeEventHandler DeviceSystemRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceSystemRowChangeEventHandler DeviceSystemRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceSystemRowChangeEventHandler DeviceSystemRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDeviceSystemRow(DeviceSystemRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRow AddDeviceSystemRow(string SystemName)
			{
				DeviceSystemRow rowDeviceSystemRow = ((DeviceSystemRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													SystemName
											};

				rowDeviceSystemRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDeviceSystemRow);

				return rowDeviceSystemRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRow FindByID(int ID)
			{
				return ((DeviceSystemRow) (this.Rows.Find(new object[]
														{
																ID
														})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DeviceSystemDataTable cln = ((DeviceSystemDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DeviceSystemDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID         = base.Columns["ID"];
				this.columnSystemName = base.Columns["SystemName"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);

				this.columnSystemName =
						new DataColumn("SystemName", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnSystemName);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement     = true;
				this.columnID.AutoIncrementSeed = -1;
				this.columnID.AutoIncrementStep = -1;
				this.columnID.AllowDBNull       = false;
				this.columnID.Unique            = true;
				this.columnSystemName.MaxLength = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRow NewDeviceSystemRow()
			{
				return ((DeviceSystemRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DeviceSystemRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DeviceSystemRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DeviceSystemRowChanged != null))
				{
					this.DeviceSystemRowChanged(this,
												new
														DeviceSystemRowChangeEvent(((DeviceSystemRow) (e.Row)),
																					e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DeviceSystemRowChanging != null))
				{
					this.DeviceSystemRowChanging(this,
												new
														DeviceSystemRowChangeEvent(((DeviceSystemRow) (e.Row)),
																					e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DeviceSystemRowDeleted != null))
				{
					this.DeviceSystemRowDeleted(this,
												new
														DeviceSystemRowChangeEvent(((DeviceSystemRow) (e.Row)),
																					e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DeviceSystemRowDeleting != null))
				{
					this.DeviceSystemRowDeleting(this,
												new
														DeviceSystemRowChangeEvent(((DeviceSystemRow) (e.Row)),
																					e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDeviceSystemRow(DeviceSystemRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DeviceSystemDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DeviceTypesDataTable : TypedTableBase<DeviceTypesRow>
		{
			private DataColumn columnID;

			private DataColumn columnTypeName;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesDataTable()
			{
				this.TableName = "DeviceTypes";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceTypesDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DeviceTypesDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn TypeNameColumn
			{
				get
				{
					return this.columnTypeName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRow this[int index]
			{
				get
				{
					return ((DeviceTypesRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceTypesRowChangeEventHandler DeviceTypesRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceTypesRowChangeEventHandler DeviceTypesRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceTypesRowChangeEventHandler DeviceTypesRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DeviceTypesRowChangeEventHandler DeviceTypesRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDeviceTypesRow(DeviceTypesRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRow AddDeviceTypesRow(string TypeName)
			{
				DeviceTypesRow rowDeviceTypesRow = ((DeviceTypesRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													TypeName
											};

				rowDeviceTypesRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDeviceTypesRow);

				return rowDeviceTypesRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRow FindByID(int ID)
			{
				return ((DeviceTypesRow) (this.Rows.Find(new object[]
														{
																ID
														})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DeviceTypesDataTable cln = ((DeviceTypesDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DeviceTypesDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID       = base.Columns["ID"];
				this.columnTypeName = base.Columns["TypeName"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);

				this.columnTypeName =
						new DataColumn("TypeName", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnTypeName);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement     = true;
				this.columnID.AutoIncrementSeed = -1;
				this.columnID.AutoIncrementStep = -1;
				this.columnID.AllowDBNull       = false;
				this.columnID.Unique            = true;
				this.columnTypeName.MaxLength   = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRow NewDeviceTypesRow()
			{
				return ((DeviceTypesRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DeviceTypesRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DeviceTypesRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DeviceTypesRowChanged != null))
				{
					this.DeviceTypesRowChanged(this,
												new
														DeviceTypesRowChangeEvent(((DeviceTypesRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DeviceTypesRowChanging != null))
				{
					this.DeviceTypesRowChanging(this,
												new
														DeviceTypesRowChangeEvent(((DeviceTypesRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DeviceTypesRowDeleted != null))
				{
					this.DeviceTypesRowDeleted(this,
												new
														DeviceTypesRowChangeEvent(((DeviceTypesRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DeviceTypesRowDeleting != null))
				{
					this.DeviceTypesRowDeleting(this,
												new
														DeviceTypesRowChangeEvent(((DeviceTypesRow) (e.Row)),
																				e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDeviceTypesRow(DeviceTypesRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DeviceTypesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class DiveceViewFinderDataTable : TypedTableBase<DiveceViewFinderRow>
		{
			private DataColumn columnID;

			private DataColumn columnViewFinderName;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderDataTable()
			{
				this.TableName = "DiveceViewFinder";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DiveceViewFinderDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected DiveceViewFinderDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn ViewFinderNameColumn
			{
				get
				{
					return this.columnViewFinderName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRow this[int index]
			{
				get
				{
					return ((DiveceViewFinderRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DiveceViewFinderRowChangeEventHandler DiveceViewFinderRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DiveceViewFinderRowChangeEventHandler DiveceViewFinderRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DiveceViewFinderRowChangeEventHandler DiveceViewFinderRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event DiveceViewFinderRowChangeEventHandler DiveceViewFinderRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddDiveceViewFinderRow(DiveceViewFinderRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRow AddDiveceViewFinderRow(string ViewFinderName)
			{
				DiveceViewFinderRow rowDiveceViewFinderRow =
						((DiveceViewFinderRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													null,
													ViewFinderName
											};

				rowDiveceViewFinderRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowDiveceViewFinderRow);

				return rowDiveceViewFinderRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRow FindByID(int ID)
			{
				return ((DiveceViewFinderRow) (this.Rows.Find(new object[]
															{
																	ID
															})));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				DiveceViewFinderDataTable cln = ((DiveceViewFinderDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new DiveceViewFinderDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnID             = base.Columns["ID"];
				this.columnViewFinderName = base.Columns["ViewFinderName"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnID);

				this.columnViewFinderName =
						new DataColumn("ViewFinderName", typeof(string), null, MappingType.Element);

				base.Columns.Add(this.columnViewFinderName);

				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
																		{
																				this
																					.columnID
																		}, true));

				this.columnID.AutoIncrement         = true;
				this.columnID.AutoIncrementSeed     = -1;
				this.columnID.AutoIncrementStep     = -1;
				this.columnID.AllowDBNull           = false;
				this.columnID.Unique                = true;
				this.columnViewFinderName.MaxLength = 255;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRow NewDiveceViewFinderRow()
			{
				return ((DiveceViewFinderRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new DiveceViewFinderRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(DiveceViewFinderRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.DiveceViewFinderRowChanged != null))
				{
					this.DiveceViewFinderRowChanged(this,
													new
															DiveceViewFinderRowChangeEvent(((DiveceViewFinderRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.DiveceViewFinderRowChanging != null))
				{
					this.DiveceViewFinderRowChanging(this,
													new
															DiveceViewFinderRowChangeEvent(((DiveceViewFinderRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.DiveceViewFinderRowDeleted != null))
				{
					this.DiveceViewFinderRowDeleted(this,
													new
															DiveceViewFinderRowChangeEvent(((DiveceViewFinderRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.DiveceViewFinderRowDeleting != null))
				{
					this.DiveceViewFinderRowDeleting(this,
													new
															DiveceViewFinderRowChangeEvent(((DiveceViewFinderRow) (e.Row)),
																							e
																								.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveDiveceViewFinderRow(DiveceViewFinderRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "DiveceViewFinderDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents the strongly named DataTable class.
		/// </summary>
		[Serializable()]
		[XmlSchemaProvider("GetTypedTableSchema")]
		public partial class BasketDataTable : TypedTableBase<BasketRow>
		{
			private DataColumn columnName;

			private DataColumn columnPrice;

			private DataColumn columnCount;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketDataTable()
			{
				this.TableName = "Basket";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal BasketDataTable(DataTable table)
			{
				this.TableName = table.TableName;

				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}

				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}

				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}

				this.Prefix          = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected BasketDataTable(SerializationInfo info, StreamingContext context) :
					base(info, context)
			{
				this.InitVars();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn PriceColumn
			{
				get
				{
					return this.columnPrice;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataColumn CountColumn
			{
				get
				{
					return this.columnCount;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			[Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketRow this[int index]
			{
				get
				{
					return ((BasketRow) (this.Rows[index]));
				}
			}

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event BasketRowChangeEventHandler BasketRowChanging;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event BasketRowChangeEventHandler BasketRowChanged;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event BasketRowChangeEventHandler BasketRowDeleting;

			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public event BasketRowChangeEventHandler BasketRowDeleted;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void AddBasketRow(BasketRow row)
			{
				this.Rows.Add(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketRow AddBasketRow(string Name, decimal Price, int Count)
			{
				BasketRow rowBasketRow = ((BasketRow) (this.NewRow()));

				object[] columnValuesArray = new object[]
											{
													Name,
													Price,
													Count
											};

				rowBasketRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowBasketRow);

				return rowBasketRow;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public override DataTable Clone()
			{
				BasketDataTable cln = ((BasketDataTable) (base.Clone()));
				cln.InitVars();

				return cln;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataTable CreateInstance()
			{
				return new BasketDataTable();
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal void InitVars()
			{
				this.columnName  = base.Columns["Name"];
				this.columnPrice = base.Columns["Price"];
				this.columnCount = base.Columns["Count"];
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private void InitClass()
			{
				this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
				base.Columns.Add(this.columnName);

				this.columnPrice =
						new DataColumn("Price", typeof(decimal), null, MappingType.Element);

				base.Columns.Add(this.columnPrice);
				this.columnCount = new DataColumn("Count", typeof(int), null, MappingType.Element);
				base.Columns.Add(this.columnCount);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketRow NewBasketRow()
			{
				return ((BasketRow) (this.NewRow()));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new BasketRow(builder);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override Type GetRowType()
			{
				return typeof(BasketRow);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);

				if ((this.BasketRowChanged != null))
				{
					this.BasketRowChanged(this,
										new BasketRowChangeEvent(((BasketRow) (e.Row)), e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);

				if ((this.BasketRowChanging != null))
				{
					this.BasketRowChanging(this,
											new BasketRowChangeEvent(((BasketRow) (e.Row)),
																	e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);

				if ((this.BasketRowDeleted != null))
				{
					this.BasketRowDeleted(this,
										new BasketRowChangeEvent(((BasketRow) (e.Row)), e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);

				if ((this.BasketRowDeleting != null))
				{
					this.BasketRowDeleting(this,
											new BasketRowChangeEvent(((BasketRow) (e.Row)),
																	e.Action));
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void RemoveBasketRow(BasketRow row)
			{
				this.Rows.Remove(row);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
			{
				XmlSchemaComplexType type     = new XmlSchemaComplexType();
				XmlSchemaSequence    sequence = new XmlSchemaSequence();
				CameraMarketDataSet  ds       = new CameraMarketDataSet();
				XmlSchemaAny         any1     = new XmlSchemaAny();
				any1.Namespace       = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs       = new decimal(0);
				any1.MaxOccurs       = decimal.MaxValue;
				any1.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				XmlSchemaAny any2 = new XmlSchemaAny();
				any2.Namespace       = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs       = new decimal(1);
				any2.ProcessContents = XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
				attribute1.Name       = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
				attribute2.Name       = "tableTypeName";
				attribute2.FixedValue = "BasketDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				XmlSchema dsSchema = ds.GetSchemaSerializable();

				if (xs.Contains(dsSchema.TargetNamespace))
				{
					MemoryStream s1 = new MemoryStream();
					MemoryStream s2 = new MemoryStream();

					try
					{
						XmlSchema schema = null;
						dsSchema.Write(s1);

						for (IEnumerator schemas =
										xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
								schemas.MoveNext();)
						{
							schema = ((XmlSchema) (schemas.Current));
							s2.SetLength(0);
							schema.Write(s2);

							if ((s1.Length == s2.Length))
							{
								s1.Position = 0;
								s2.Position = 0;

								for (;
										((s1.Position     != s1.Length)
										&& (s1.ReadByte() == s2.ReadByte()));)
								{
									;
								}

								if ((s1.Position == s1.Length))
								{
									return type;
								}
							}
						}
					} finally
					{
						if ((s1 != null))
						{
							s1.Close();
						}

						if ((s2 != null))
						{
							s2.Close();
						}
					}
				}

				xs.Add(dsSchema);

				return type;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DeviceRow : DataRow
		{
			private DeviceDataTable tableDevice;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDevice = ((DeviceDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDevice.IDColumn]));
				}
				set
				{
					this[this.tableDevice.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string Name
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.NameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Name\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.NameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string Category
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.CategoryColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Category\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.CategoryColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string SensorSize
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.SensorSizeColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'SensorSize\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.SensorSizeColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string System
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.SystemColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'System\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.SystemColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool VideoRecord
			{
				get
				{
					try
					{
						return ((bool) (this[this.tableDevice.VideoRecordColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'VideoRecord\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.VideoRecordColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int MonitorMount
			{
				get
				{
					try
					{
						return ((int) (this[this.tableDevice.MonitorMountColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'MonitorMount\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.MonitorMountColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public decimal Megapixel
			{
				get
				{
					try
					{
						return ((decimal) (this[this.tableDevice.MegapixelColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Megapixel\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.MegapixelColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public decimal Price
			{
				get
				{
					try
					{
						return ((decimal) (this[this.tableDevice.PriceColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Price\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.PriceColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool RawPhoto
			{
				get
				{
					try
					{
						return ((bool) (this[this.tableDevice.RawPhotoColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'RawPhoto\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.RawPhotoColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool CameraLight
			{
				get
				{
					try
					{
						return ((bool) (this[this.tableDevice.CameraLightColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'CameraLight\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.CameraLightColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string ColorProfile
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.ColorProfileColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'ColorProfile\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.ColorProfileColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string OptionalStabil
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.OptionalStabilColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'OptionalStabil\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.OptionalStabilColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string ViewFinder
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.ViewFinderColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'ViewFinder\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.ViewFinderColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string Shell
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDevice.ShellColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Shell\' в таблице \'Device\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDevice.ShellColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsNameNull()
			{
				return this.IsNull(this.tableDevice.NameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetNameNull()
			{
				this[this.tableDevice.NameColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsCategoryNull()
			{
				return this.IsNull(this.tableDevice.CategoryColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetCategoryNull()
			{
				this[this.tableDevice.CategoryColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsSensorSizeNull()
			{
				return this.IsNull(this.tableDevice.SensorSizeColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetSensorSizeNull()
			{
				this[this.tableDevice.SensorSizeColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsSystemNull()
			{
				return this.IsNull(this.tableDevice.SystemColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetSystemNull()
			{
				this[this.tableDevice.SystemColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsVideoRecordNull()
			{
				return this.IsNull(this.tableDevice.VideoRecordColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetVideoRecordNull()
			{
				this[this.tableDevice.VideoRecordColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsMonitorMountNull()
			{
				return this.IsNull(this.tableDevice.MonitorMountColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetMonitorMountNull()
			{
				this[this.tableDevice.MonitorMountColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsMegapixelNull()
			{
				return this.IsNull(this.tableDevice.MegapixelColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetMegapixelNull()
			{
				this[this.tableDevice.MegapixelColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsPriceNull()
			{
				return this.IsNull(this.tableDevice.PriceColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetPriceNull()
			{
				this[this.tableDevice.PriceColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsRawPhotoNull()
			{
				return this.IsNull(this.tableDevice.RawPhotoColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetRawPhotoNull()
			{
				this[this.tableDevice.RawPhotoColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsCameraLightNull()
			{
				return this.IsNull(this.tableDevice.CameraLightColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetCameraLightNull()
			{
				this[this.tableDevice.CameraLightColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsColorProfileNull()
			{
				return this.IsNull(this.tableDevice.ColorProfileColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetColorProfileNull()
			{
				this[this.tableDevice.ColorProfileColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsOptionalStabilNull()
			{
				return this.IsNull(this.tableDevice.OptionalStabilColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetOptionalStabilNull()
			{
				this[this.tableDevice.OptionalStabilColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsViewFinderNull()
			{
				return this.IsNull(this.tableDevice.ViewFinderColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetViewFinderNull()
			{
				this[this.tableDevice.ViewFinderColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsShellNull()
			{
				return this.IsNull(this.tableDevice.ShellColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetShellNull()
			{
				this[this.tableDevice.ShellColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DeviceColorProfileRow : DataRow
		{
			private DeviceColorProfileDataTable tableDeviceColorProfile;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceColorProfileRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDeviceColorProfile = ((DeviceColorProfileDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDeviceColorProfile.IDColumn]));
				}
				set
				{
					this[this.tableDeviceColorProfile.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string ColorProfileName
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDeviceColorProfile.ColorProfileNameColumn])
								);
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'ColorProfileName\' в таблице \'DeviceColorProfile\' равно DBNu" + "ll.",
													e);
					}
				}
				set
				{
					this[this.tableDeviceColorProfile.ColorProfileNameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsColorProfileNameNull()
			{
				return this.IsNull(this.tableDeviceColorProfile.ColorProfileNameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetColorProfileNameNull()
			{
				this[this.tableDeviceColorProfile.ColorProfileNameColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DeviceShellRow : DataRow
		{
			private DeviceShellDataTable tableDeviceShell;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceShellRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDeviceShell = ((DeviceShellDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDeviceShell.IDColumn]));
				}
				set
				{
					this[this.tableDeviceShell.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string ShellTypeName
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDeviceShell.ShellTypeNameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'ShellTypeName\' в таблице \'DeviceShell\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDeviceShell.ShellTypeNameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsShellTypeNameNull()
			{
				return this.IsNull(this.tableDeviceShell.ShellTypeNameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetShellTypeNameNull()
			{
				this[this.tableDeviceShell.ShellTypeNameColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DeviceSystemRow : DataRow
		{
			private DeviceSystemDataTable tableDeviceSystem;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceSystemRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDeviceSystem = ((DeviceSystemDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDeviceSystem.IDColumn]));
				}
				set
				{
					this[this.tableDeviceSystem.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string SystemName
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDeviceSystem.SystemNameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'SystemName\' в таблице \'DeviceSystem\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDeviceSystem.SystemNameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsSystemNameNull()
			{
				return this.IsNull(this.tableDeviceSystem.SystemNameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetSystemNameNull()
			{
				this[this.tableDeviceSystem.SystemNameColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DeviceTypesRow : DataRow
		{
			private DeviceTypesDataTable tableDeviceTypes;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DeviceTypesRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDeviceTypes = ((DeviceTypesDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDeviceTypes.IDColumn]));
				}
				set
				{
					this[this.tableDeviceTypes.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string TypeName
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDeviceTypes.TypeNameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'TypeName\' в таблице \'DeviceTypes\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDeviceTypes.TypeNameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsTypeNameNull()
			{
				return this.IsNull(this.tableDeviceTypes.TypeNameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetTypeNameNull()
			{
				this[this.tableDeviceTypes.TypeNameColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class DiveceViewFinderRow : DataRow
		{
			private DiveceViewFinderDataTable tableDiveceViewFinder;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal DiveceViewFinderRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableDiveceViewFinder = ((DiveceViewFinderDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int ID
			{
				get
				{
					return ((int) (this[this.tableDiveceViewFinder.IDColumn]));
				}
				set
				{
					this[this.tableDiveceViewFinder.IDColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string ViewFinderName
			{
				get
				{
					try
					{
						return ((string) (this[this.tableDiveceViewFinder.ViewFinderNameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'ViewFinderName\' в таблице \'DiveceViewFinder\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableDiveceViewFinder.ViewFinderNameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsViewFinderNameNull()
			{
				return this.IsNull(this.tableDiveceViewFinder.ViewFinderNameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetViewFinderNameNull()
			{
				this[this.tableDiveceViewFinder.ViewFinderNameColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Represents strongly named DataRow class.
		/// </summary>
		public partial class BasketRow : DataRow
		{
			private BasketDataTable tableBasket;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal BasketRow(DataRowBuilder rb) :
					base(rb)
			{
				this.tableBasket = ((BasketDataTable) (this.Table));
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public string Name
			{
				get
				{
					try
					{
						return ((string) (this[this.tableBasket.NameColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Name\' в таблице \'Basket\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableBasket.NameColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public decimal Price
			{
				get
				{
					try
					{
						return ((decimal) (this[this.tableBasket.PriceColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Price\' в таблице \'Basket\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableBasket.PriceColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int Count
			{
				get
				{
					try
					{
						return ((int) (this[this.tableBasket.CountColumn]));
					} catch (InvalidCastException e)
					{
						throw new
								StrongTypingException("Значение для столбца \'Count\' в таблице \'Basket\' равно DBNull.",
													e);
					}
				}
				set
				{
					this[this.tableBasket.CountColumn] = value;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsNameNull()
			{
				return this.IsNull(this.tableBasket.NameColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetNameNull()
			{
				this[this.tableBasket.NameColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsPriceNull()
			{
				return this.IsNull(this.tableBasket.PriceColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetPriceNull()
			{
				this[this.tableBasket.PriceColumn] = Convert.DBNull;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public bool IsCountNull()
			{
				return this.IsNull(this.tableBasket.CountColumn);
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public void SetCountNull()
			{
				this[this.tableBasket.CountColumn] = Convert.DBNull;
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DeviceRowChangeEvent : EventArgs
		{
			private DeviceRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRowChangeEvent(DeviceRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DeviceColorProfileRowChangeEvent : EventArgs
		{
			private DeviceColorProfileRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRowChangeEvent(DeviceColorProfileRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceColorProfileRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DeviceShellRowChangeEvent : EventArgs
		{
			private DeviceShellRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRowChangeEvent(DeviceShellRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceShellRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DeviceSystemRowChangeEvent : EventArgs
		{
			private DeviceSystemRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRowChangeEvent(DeviceSystemRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceSystemRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DeviceTypesRowChangeEvent : EventArgs
		{
			private DeviceTypesRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRowChangeEvent(DeviceTypesRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DeviceTypesRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class DiveceViewFinderRowChangeEvent : EventArgs
		{
			private DiveceViewFinderRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRowChangeEvent(DiveceViewFinderRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DiveceViewFinderRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		/// <summary>
		///   Row event argument class
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public class BasketRowChangeEvent : EventArgs
		{
			private BasketRow eventRow;

			private DataRowAction eventAction;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketRowChangeEvent(BasketRow row, DataRowAction action)
			{
				this.eventRow    = row;
				this.eventAction = action;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public BasketRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DeviceTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DeviceTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "Device";
			tableMapping.ColumnMappings.Add("ID",             "ID");
			tableMapping.ColumnMappings.Add("Name",           "Name");
			tableMapping.ColumnMappings.Add("Category",       "Category");
			tableMapping.ColumnMappings.Add("SensorSize",     "SensorSize");
			tableMapping.ColumnMappings.Add("System",         "System");
			tableMapping.ColumnMappings.Add("VideoRecord",    "VideoRecord");
			tableMapping.ColumnMappings.Add("MonitorMount",   "MonitorMount");
			tableMapping.ColumnMappings.Add("Megapixel",      "Megapixel");
			tableMapping.ColumnMappings.Add("Price",          "Price");
			tableMapping.ColumnMappings.Add("RawPhoto",       "RawPhoto");
			tableMapping.ColumnMappings.Add("CameraLight",    "CameraLight");
			tableMapping.ColumnMappings.Add("ColorProfile",   "ColorProfile");
			tableMapping.ColumnMappings.Add("OptionalStabil", "OptionalStabil");
			tableMapping.ColumnMappings.Add("ViewFinder",     "ViewFinder");
			tableMapping.ColumnMappings.Add("Shell",          "Shell");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					@"DELETE FROM `Device` WHERE ((`ID` = ?) AND ((? = 1 AND `Name` IS NULL) OR (`Name` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `SensorSize` IS NULL) OR (`SensorSize` = ?)) AND ((? = 1 AND `System` IS NULL) OR (`System` = ?)) AND ((? = 1 AND `VideoRecord` IS NULL) OR (`VideoRecord` = ?)) AND ((? = 1 AND `MonitorMount` IS NULL) OR (`MonitorMount` = ?)) AND ((? = 1 AND `Megapixel` IS NULL) OR (`Megapixel` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)) AND ((? = 1 AND `RawPhoto` IS NULL) OR (`RawPhoto` = ?)) AND ((? = 1 AND `CameraLight` IS NULL) OR (`CameraLight` = ?)) AND ((? = 1 AND `ColorProfile` IS NULL) OR (`ColorProfile` = ?)) AND ((? = 1 AND `OptionalStabil` IS NULL) OR (`OptionalStabil` = ?)) AND ((? = 1 AND `ViewFinder` IS NULL) OR (`ViewFinder` = ?)) AND ((? = 1 AND `Shell` IS NULL) OR (`Shell` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_Name",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_Name",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_Category",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_Category",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_SensorSize",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_SensorSize",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_System",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_System",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_VideoRecord",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_VideoRecord",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_Megapixel",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_Megapixel",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_Price",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_Price",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_RawPhoto",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_RawPhoto",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_CameraLight",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_CameraLight",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_ColorProfile",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ColorProfile",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_OptionalStabil",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_OptionalStabil",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_ViewFinder",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ViewFinder",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_Shell",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_Shell",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `Device` (`Name`, `Category`, `SensorSize`, `System`, `VideoRecord`, "
					+ "`MonitorMount`, `Megapixel`, `Price`, `RawPhoto`, `CameraLight`, `ColorProfile`,"
					+ " `OptionalStabil`, `ViewFinder`, `Shell`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
					+ "?, ?, ?, ?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("Name",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("Category",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("SensorSize",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("System",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("VideoRecord",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("Megapixel",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("Price",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("RawPhoto",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("CameraLight",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("ColorProfile",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("OptionalStabil",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("ViewFinder",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("Shell",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					@"UPDATE `Device` SET `Name` = ?, `Category` = ?, `SensorSize` = ?, `System` = ?, `VideoRecord` = ?, `MonitorMount` = ?, `Megapixel` = ?, `Price` = ?, `RawPhoto` = ?, `CameraLight` = ?, `ColorProfile` = ?, `OptionalStabil` = ?, `ViewFinder` = ?, `Shell` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Name` IS NULL) OR (`Name` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `SensorSize` IS NULL) OR (`SensorSize` = ?)) AND ((? = 1 AND `System` IS NULL) OR (`System` = ?)) AND ((? = 1 AND `VideoRecord` IS NULL) OR (`VideoRecord` = ?)) AND ((? = 1 AND `MonitorMount` IS NULL) OR (`MonitorMount` = ?)) AND ((? = 1 AND `Megapixel` IS NULL) OR (`Megapixel` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)) AND ((? = 1 AND `RawPhoto` IS NULL) OR (`RawPhoto` = ?)) AND ((? = 1 AND `CameraLight` IS NULL) OR (`CameraLight` = ?)) AND ((? = 1 AND `ColorProfile` IS NULL) OR (`ColorProfile` = ?)) AND ((? = 1 AND `OptionalStabil` IS NULL) OR (`OptionalStabil` = ?)) AND ((? = 1 AND `ViewFinder` IS NULL) OR (`ViewFinder` = ?)) AND ((? = 1 AND `Shell` IS NULL) OR (`Shell` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Name",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Category",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("SensorSize",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("System",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("VideoRecord",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Megapixel",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Price",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("RawPhoto",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("CameraLight",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("ColorProfile",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("OptionalStabil",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("ViewFinder",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Shell",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_Name",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_Name",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Name",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_Category",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_Category",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Category",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_SensorSize",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_SensorSize",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SensorSize",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_System",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_System",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"System",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_VideoRecord",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_VideoRecord",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"VideoRecord",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_MonitorMount",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"MonitorMount",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_Megapixel",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_Megapixel",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Megapixel",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_Price",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_Price",
																		OleDbType.Numeric, 0,
																		ParameterDirection.Input,
																		((byte) (18)), ((byte) (0)),
																		"Price",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_RawPhoto",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_RawPhoto",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"RawPhoto",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_CameraLight",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_CameraLight",
																		OleDbType.Boolean, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"CameraLight",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_ColorProfile",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ColorProfile",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfile",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_OptionalStabil",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_OptionalStabil",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"OptionalStabil",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_ViewFinder",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ViewFinder",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinder",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_Shell",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_Shell",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"Shell",
																		DataRowVersion.Original,
																		false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection               = new OleDbCommand[1];
			this._commandCollection[0]            = new OleDbCommand();
			this._commandCollection[0].Connection = this.Connection;

			this._commandCollection[0].CommandText =
					"SELECT ID, Name, Category, SensorSize, System, VideoRecord, MonitorMount, Megapix"
					+ "el, Price, RawPhoto, CameraLight, ColorProfile, OptionalStabil, ViewFinder, Shel"
					+ "l FROM Device";

			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DeviceDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DeviceDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DeviceDataTable dataTable =
					new CameraMarketDataSet.DeviceDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DeviceDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "Device");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int             Original_ID,
								string            Original_Name,
								string            Original_Category,
								string            Original_SensorSize,
								string            Original_System,
								bool              Original_VideoRecord,
								Nullable<int>     Original_MonitorMount,
								Nullable<decimal> Original_Megapixel,
								Nullable<decimal> Original_Price,
								bool              Original_RawPhoto,
								bool              Original_CameraLight,
								string            Original_ColorProfile,
								string            Original_OptionalStabil,
								string            Original_ViewFinder,
								string            Original_Shell)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_Name == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string) (Original_Name));
			}

			if ((Original_Category == null))
			{
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((string) (Original_Category));
			}

			if ((Original_SensorSize == null))
			{
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[6].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((string) (Original_SensorSize));
			}

			if ((Original_System == null))
			{
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[8].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((string) (Original_System));
			}

			this.Adapter.DeleteCommand.Parameters[9].Value  = ((object) (0));
			this.Adapter.DeleteCommand.Parameters[10].Value = ((bool) (Original_VideoRecord));

			if ((Original_MonitorMount.HasValue == true))
			{
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[12].Value =
						((int) (Original_MonitorMount.Value));
			} else
			{
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[12].Value = DBNull.Value;
			}

			if ((Original_Megapixel.HasValue == true))
			{
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[14].Value =
						((decimal) (Original_Megapixel.Value));
			} else
			{
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[14].Value = DBNull.Value;
			}

			if ((Original_Price.HasValue == true))
			{
				this.Adapter.DeleteCommand.Parameters[15].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[16].Value =
						((decimal) (Original_Price.Value));
			} else
			{
				this.Adapter.DeleteCommand.Parameters[15].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[16].Value = DBNull.Value;
			}

			this.Adapter.DeleteCommand.Parameters[17].Value = ((object) (0));
			this.Adapter.DeleteCommand.Parameters[18].Value = ((bool) (Original_RawPhoto));
			this.Adapter.DeleteCommand.Parameters[19].Value = ((object) (0));
			this.Adapter.DeleteCommand.Parameters[20].Value = ((bool) (Original_CameraLight));

			if ((Original_ColorProfile == null))
			{
				this.Adapter.DeleteCommand.Parameters[21].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[22].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[21].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[22].Value =
						((string) (Original_ColorProfile));
			}

			if ((Original_OptionalStabil == null))
			{
				this.Adapter.DeleteCommand.Parameters[23].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[24].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[23].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[24].Value =
						((string) (Original_OptionalStabil));
			}

			if ((Original_ViewFinder == null))
			{
				this.Adapter.DeleteCommand.Parameters[25].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[26].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[25].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[26].Value = ((string) (Original_ViewFinder));
			}

			if ((Original_Shell == null))
			{
				this.Adapter.DeleteCommand.Parameters[27].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[28].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[27].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[28].Value = ((string) (Original_Shell));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string          Name,
								string            Category,
								string            SensorSize,
								string            System,
								bool              VideoRecord,
								Nullable<int>     MonitorMount,
								Nullable<decimal> Megapixel,
								Nullable<decimal> Price,
								bool              RawPhoto,
								bool              CameraLight,
								string            ColorProfile,
								string            OptionalStabil,
								string            ViewFinder,
								string            Shell)
		{
			if ((Name == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (Name));
			}

			if ((Category == null))
			{
				this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[1].Value = ((string) (Category));
			}

			if ((SensorSize == null))
			{
				this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[2].Value = ((string) (SensorSize));
			}

			if ((System == null))
			{
				this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[3].Value = ((string) (System));
			}

			this.Adapter.InsertCommand.Parameters[4].Value = ((bool) (VideoRecord));

			if ((MonitorMount.HasValue == true))
			{
				this.Adapter.InsertCommand.Parameters[5].Value = ((int) (MonitorMount.Value));
			} else
			{
				this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
			}

			if ((Megapixel.HasValue == true))
			{
				this.Adapter.InsertCommand.Parameters[6].Value = ((decimal) (Megapixel.Value));
			} else
			{
				this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
			}

			if ((Price.HasValue == true))
			{
				this.Adapter.InsertCommand.Parameters[7].Value = ((decimal) (Price.Value));
			} else
			{
				this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
			}

			this.Adapter.InsertCommand.Parameters[8].Value = ((bool) (RawPhoto));
			this.Adapter.InsertCommand.Parameters[9].Value = ((bool) (CameraLight));

			if ((ColorProfile == null))
			{
				this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[10].Value = ((string) (ColorProfile));
			}

			if ((OptionalStabil == null))
			{
				this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[11].Value = ((string) (OptionalStabil));
			}

			if ((ViewFinder == null))
			{
				this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[12].Value = ((string) (ViewFinder));
			}

			if ((Shell == null))
			{
				this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[13].Value = ((string) (Shell));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(
				string            Name,
				string            Category,
				string            SensorSize,
				string            System,
				bool              VideoRecord,
				Nullable<int>     MonitorMount,
				Nullable<decimal> Megapixel,
				Nullable<decimal> Price,
				bool              RawPhoto,
				bool              CameraLight,
				string            ColorProfile,
				string            OptionalStabil,
				string            ViewFinder,
				string            Shell,
				int               Original_ID,
				string            Original_Name,
				string            Original_Category,
				string            Original_SensorSize,
				string            Original_System,
				bool              Original_VideoRecord,
				Nullable<int>     Original_MonitorMount,
				Nullable<decimal> Original_Megapixel,
				Nullable<decimal> Original_Price,
				bool              Original_RawPhoto,
				bool              Original_CameraLight,
				string            Original_ColorProfile,
				string            Original_OptionalStabil,
				string            Original_ViewFinder,
				string            Original_Shell)
		{
			if ((Name == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (Name));
			}

			if ((Category == null))
			{
				this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string) (Category));
			}

			if ((SensorSize == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string) (SensorSize));
			}

			if ((System == null))
			{
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string) (System));
			}

			this.Adapter.UpdateCommand.Parameters[4].Value = ((bool) (VideoRecord));

			if ((MonitorMount.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[5].Value = ((int) (MonitorMount.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
			}

			if ((Megapixel.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal) (Megapixel.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
			}

			if ((Price.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal) (Price.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
			}

			this.Adapter.UpdateCommand.Parameters[8].Value = ((bool) (RawPhoto));
			this.Adapter.UpdateCommand.Parameters[9].Value = ((bool) (CameraLight));

			if ((ColorProfile == null))
			{
				this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[10].Value = ((string) (ColorProfile));
			}

			if ((OptionalStabil == null))
			{
				this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[11].Value = ((string) (OptionalStabil));
			}

			if ((ViewFinder == null))
			{
				this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[12].Value = ((string) (ViewFinder));
			}

			if ((Shell == null))
			{
				this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[13].Value = ((string) (Shell));
			}

			this.Adapter.UpdateCommand.Parameters[14].Value = ((int) (Original_ID));

			if ((Original_Name == null))
			{
				this.Adapter.UpdateCommand.Parameters[15].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[15].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[16].Value = ((string) (Original_Name));
			}

			if ((Original_Category == null))
			{
				this.Adapter.UpdateCommand.Parameters[17].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[17].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[18].Value = ((string) (Original_Category));
			}

			if ((Original_SensorSize == null))
			{
				this.Adapter.UpdateCommand.Parameters[19].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[19].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[20].Value = ((string) (Original_SensorSize));
			}

			if ((Original_System == null))
			{
				this.Adapter.UpdateCommand.Parameters[21].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[22].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[21].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[22].Value = ((string) (Original_System));
			}

			this.Adapter.UpdateCommand.Parameters[23].Value = ((object) (0));
			this.Adapter.UpdateCommand.Parameters[24].Value = ((bool) (Original_VideoRecord));

			if ((Original_MonitorMount.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[25].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[26].Value =
						((int) (Original_MonitorMount.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[25].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[26].Value = DBNull.Value;
			}

			if ((Original_Megapixel.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[27].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[28].Value =
						((decimal) (Original_Megapixel.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[27].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[28].Value = DBNull.Value;
			}

			if ((Original_Price.HasValue == true))
			{
				this.Adapter.UpdateCommand.Parameters[29].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[30].Value =
						((decimal) (Original_Price.Value));
			} else
			{
				this.Adapter.UpdateCommand.Parameters[29].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[30].Value = DBNull.Value;
			}

			this.Adapter.UpdateCommand.Parameters[31].Value = ((object) (0));
			this.Adapter.UpdateCommand.Parameters[32].Value = ((bool) (Original_RawPhoto));
			this.Adapter.UpdateCommand.Parameters[33].Value = ((object) (0));
			this.Adapter.UpdateCommand.Parameters[34].Value = ((bool) (Original_CameraLight));

			if ((Original_ColorProfile == null))
			{
				this.Adapter.UpdateCommand.Parameters[35].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[36].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[35].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[36].Value =
						((string) (Original_ColorProfile));
			}

			if ((Original_OptionalStabil == null))
			{
				this.Adapter.UpdateCommand.Parameters[37].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[38].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[37].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[38].Value =
						((string) (Original_OptionalStabil));
			}

			if ((Original_ViewFinder == null))
			{
				this.Adapter.UpdateCommand.Parameters[39].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[40].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[39].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[40].Value = ((string) (Original_ViewFinder));
			}

			if ((Original_Shell == null))
			{
				this.Adapter.UpdateCommand.Parameters[41].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[42].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[41].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[42].Value = ((string) (Original_Shell));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DeviceColorProfileTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DeviceColorProfileTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "DeviceColorProfile";
			tableMapping.ColumnMappings.Add("ID",               "ID");
			tableMapping.ColumnMappings.Add("ColorProfileName", "ColorProfileName");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					"DELETE FROM `DeviceColorProfile` WHERE ((`ID` = ?) AND ((? = 1 AND `ColorProfileN"
					+ "ame` IS NULL) OR (`ColorProfileName` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_ColorProfileName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfileName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new
																OleDbParameter("Original_ColorProfileName",
																				OleDbType.VarWChar,
																				0,
																				ParameterDirection
																					.Input,
																				((byte) (0)),
																				((byte) (0)),
																				"ColorProfileName",
																				DataRowVersion
																					.Original,
																				false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `DeviceColorProfile` (`ColorProfileName`) VALUES (?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("ColorProfileName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfileName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					"UPDATE `DeviceColorProfile` SET `ColorProfileName` = ? WHERE ((`ID` = ?) AND ((? "
					+ "= 1 AND `ColorProfileName` IS NULL) OR (`ColorProfileName` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("ColorProfileName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfileName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_ColorProfileName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ColorProfileName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new
																OleDbParameter("Original_ColorProfileName",
																				OleDbType.VarWChar,
																				0,
																				ParameterDirection
																					.Input,
																				((byte) (0)),
																				((byte) (0)),
																				"ColorProfileName",
																				DataRowVersion
																					.Original,
																				false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection               = new OleDbCommand[1];
			this._commandCollection[0]            = new OleDbCommand();
			this._commandCollection[0].Connection = this.Connection;

			this._commandCollection[0].CommandText =
					"SELECT ID, ColorProfileName FROM DeviceColorProfile";

			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DeviceColorProfileDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DeviceColorProfileDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DeviceColorProfileDataTable dataTable =
					new CameraMarketDataSet.DeviceColorProfileDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DeviceColorProfileDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "DeviceColorProfile");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_ColorProfileName)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_ColorProfileName == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[2].Value =
						((string) (Original_ColorProfileName));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string ColorProfileName)
		{
			if ((ColorProfileName == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (ColorProfileName));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(string ColorProfileName,
								int      Original_ID,
								string   Original_ColorProfileName)
		{
			if ((ColorProfileName == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (ColorProfileName));
			}

			this.Adapter.UpdateCommand.Parameters[1].Value = ((int) (Original_ID));

			if ((Original_ColorProfileName == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[3].Value =
						((string) (Original_ColorProfileName));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DeviceShellTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DeviceShellTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "DeviceShell";
			tableMapping.ColumnMappings.Add("ID",            "ID");
			tableMapping.ColumnMappings.Add("ShellTypeName", "ShellTypeName");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					"DELETE FROM `DeviceShell` WHERE ((`ID` = ?) AND ((? = 1 AND `ShellTypeName` IS NU"
					+ "LL) OR (`ShellTypeName` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_ShellTypeName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ShellTypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `DeviceShell` (`ShellTypeName`) VALUES (?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("ShellTypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					"UPDATE `DeviceShell` SET `ShellTypeName` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `S"
					+ "hellTypeName` IS NULL) OR (`ShellTypeName` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("ShellTypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_ShellTypeName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ShellTypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ShellTypeName",
																		DataRowVersion.Original,
																		false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection                = new OleDbCommand[1];
			this._commandCollection[0]             = new OleDbCommand();
			this._commandCollection[0].Connection  = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, ShellTypeName FROM DeviceShell";
			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DeviceShellDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DeviceShellDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DeviceShellDataTable dataTable =
					new CameraMarketDataSet.DeviceShellDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DeviceShellDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "DeviceShell");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_ShellTypeName)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_ShellTypeName == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[2].Value =
						((string) (Original_ShellTypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string ShellTypeName)
		{
			if ((ShellTypeName == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (ShellTypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(string ShellTypeName,
								int      Original_ID,
								string   Original_ShellTypeName)
		{
			if ((ShellTypeName == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (ShellTypeName));
			}

			this.Adapter.UpdateCommand.Parameters[1].Value = ((int) (Original_ID));

			if ((Original_ShellTypeName == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[3].Value =
						((string) (Original_ShellTypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DeviceSystemTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DeviceSystemTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "DeviceSystem";
			tableMapping.ColumnMappings.Add("ID",         "ID");
			tableMapping.ColumnMappings.Add("SystemName", "SystemName");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					"DELETE FROM `DeviceSystem` WHERE ((`ID` = ?) AND ((? = 1 AND `SystemName` IS NULL"
					+ ") OR (`SystemName` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_SystemName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_SystemName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `DeviceSystem` (`SystemName`) VALUES (?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("SystemName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					"UPDATE `DeviceSystem` SET `SystemName` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Sys"
					+ "temName` IS NULL) OR (`SystemName` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("SystemName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_SystemName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_SystemName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"SystemName",
																		DataRowVersion.Original,
																		false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection                = new OleDbCommand[1];
			this._commandCollection[0]             = new OleDbCommand();
			this._commandCollection[0].Connection  = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, SystemName FROM DeviceSystem";
			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DeviceSystemDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DeviceSystemDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DeviceSystemDataTable dataTable =
					new CameraMarketDataSet.DeviceSystemDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DeviceSystemDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "DeviceSystem");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_SystemName)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_SystemName == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string) (Original_SystemName));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string SystemName)
		{
			if ((SystemName == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (SystemName));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(string SystemName, int Original_ID, string Original_SystemName)
		{
			if ((SystemName == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (SystemName));
			}

			this.Adapter.UpdateCommand.Parameters[1].Value = ((int) (Original_ID));

			if ((Original_SystemName == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string) (Original_SystemName));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DeviceTypesTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DeviceTypesTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "DeviceTypes";
			tableMapping.ColumnMappings.Add("ID",       "ID");
			tableMapping.ColumnMappings.Add("TypeName", "TypeName");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					"DELETE FROM `DeviceTypes` WHERE ((`ID` = ?) AND ((? = 1 AND `TypeName` IS NULL) O"
					+ "R (`TypeName` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_TypeName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_TypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `DeviceTypes` (`TypeName`) VALUES (?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("TypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					"UPDATE `DeviceTypes` SET `TypeName` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `TypeNa"
					+ "me` IS NULL) OR (`TypeName` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("TypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_TypeName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_TypeName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"TypeName",
																		DataRowVersion.Original,
																		false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection                = new OleDbCommand[1];
			this._commandCollection[0]             = new OleDbCommand();
			this._commandCollection[0].Connection  = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, TypeName FROM DeviceTypes";
			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DeviceTypesDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DeviceTypesDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DeviceTypesDataTable dataTable =
					new CameraMarketDataSet.DeviceTypesDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DeviceTypesDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "DeviceTypes");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_TypeName)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_TypeName == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string) (Original_TypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string TypeName)
		{
			if ((TypeName == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (TypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(string TypeName, int Original_ID, string Original_TypeName)
		{
			if ((TypeName == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (TypeName));
			}

			this.Adapter.UpdateCommand.Parameters[1].Value = ((int) (Original_ID));

			if ((Original_TypeName == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (0));
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string) (Original_TypeName));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   Represents the connection and commands used to retrieve and save data.
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[DataObject(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"
			+ ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapter")]
	public partial class DiveceViewFinderTableAdapter : Component
	{
		private OleDbDataAdapter _adapter;

		private OleDbConnection _connection;

		private OleDbTransaction _transaction;

		private OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public DiveceViewFinderTableAdapter()
		{
			this.ClearBeforeFill = true;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected internal OleDbDataAdapter Adapter
		{
			get
			{
				if ((this._adapter == null))
				{
					this.InitAdapter();
				}

				return this._adapter;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbConnection Connection
		{
			get
			{
				if ((this._connection == null))
				{
					this.InitConnection();
				}

				return this._connection;
			}
			set
			{
				this._connection = value;

				if ((this.Adapter.InsertCommand != null))
				{
					this.Adapter.InsertCommand.Connection = value;
				}

				if ((this.Adapter.DeleteCommand != null))
				{
					this.Adapter.DeleteCommand.Connection = value;
				}

				if ((this.Adapter.UpdateCommand != null))
				{
					this.Adapter.UpdateCommand.Connection = value;
				}

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					if ((this.CommandCollection[i] != null))
					{
						((OleDbCommand) (this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		internal OleDbTransaction Transaction
		{
			get
			{
				return this._transaction;
			}
			set
			{
				this._transaction = value;

				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
				{
					this.CommandCollection[i].Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.DeleteCommand != null)))
				{
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.InsertCommand != null)))
				{
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}

				if (((this.Adapter                 != null)
					&& (this.Adapter.UpdateCommand != null)))
				{
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected OleDbCommand[] CommandCollection
		{
			get
			{
				if ((this._commandCollection == null))
				{
					this.InitCommandCollection();
				}

				return this._commandCollection;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool ClearBeforeFill
		{
			get
			{
				return this._clearBeforeFill;
			}
			set
			{
				this._clearBeforeFill = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new OleDbDataAdapter();
			DataTableMapping tableMapping = new DataTableMapping();
			tableMapping.SourceTable  = "Table";
			tableMapping.DataSetTable = "DiveceViewFinder";
			tableMapping.ColumnMappings.Add("ID",             "ID");
			tableMapping.ColumnMappings.Add("ViewFinderName", "ViewFinderName");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand            = new OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;

			this._adapter.DeleteCommand.CommandText =
					"DELETE FROM `DiveceViewFinder` WHERE ((`ID` = ?) AND ((? = 1 AND `ViewFinderName`"
					+ " IS NULL) OR (`ViewFinderName` = ?)))";

			this._adapter.DeleteCommand.CommandType = CommandType.Text;

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_ViewFinderName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_ViewFinderName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.InsertCommand            = new OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;

			this._adapter.InsertCommand.CommandText =
					"INSERT INTO `DiveceViewFinder` (`ViewFinderName`) VALUES (?)";

			this._adapter.InsertCommand.CommandType = CommandType.Text;

			this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("ViewFinderName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand            = new OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;

			this._adapter.UpdateCommand.CommandText =
					"UPDATE `DiveceViewFinder` SET `ViewFinderName` = ? WHERE ((`ID` = ?) AND ((? = 1 "
					+ "AND `ViewFinderName` IS NULL) OR (`ViewFinderName` = ?)))";

			this._adapter.UpdateCommand.CommandType = CommandType.Text;

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("ViewFinderName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Current,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ID",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ID",
																		DataRowVersion.Original,
																		false, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_ViewFinderName",
																		OleDbType.Integer, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Original,
																		true, null));

			this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_ViewFinderName",
																		OleDbType.VarWChar, 0,
																		ParameterDirection.Input,
																		((byte) (0)), ((byte) (0)),
																		"ViewFinderName",
																		DataRowVersion.Original,
																		false, null));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitConnection()
		{
			this._connection                  = new OleDbConnection();
			this._connection.ConnectionString = Settings.Default.CameraMarketConnectionString;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection               = new OleDbCommand[1];
			this._commandCollection[0]            = new OleDbCommand();
			this._commandCollection[0].Connection = this.Connection;

			this._commandCollection[0].CommandText =
					"SELECT ID, ViewFinderName FROM DiveceViewFinder";

			this._commandCollection[0].CommandType = CommandType.Text;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Fill, true)]
		public virtual int Fill(CameraMarketDataSet.DiveceViewFinderDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			if ((this.ClearBeforeFill == true))
			{
				dataTable.Clear();
			}

			int returnValue = this.Adapter.Fill(dataTable);

			return returnValue;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public virtual CameraMarketDataSet.DiveceViewFinderDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];

			CameraMarketDataSet.DiveceViewFinderDataTable dataTable =
					new CameraMarketDataSet.DiveceViewFinderDataTable();

			this.Adapter.Fill(dataTable);

			return dataTable;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet.DiveceViewFinderDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(CameraMarketDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "DiveceViewFinder");
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow dataRow)
		{
			return this.Adapter.Update(new DataRow[]
										{
												dataRow
										});
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		public virtual int Update(DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_ViewFinderName)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = ((int) (Original_ID));

			if ((Original_ViewFinderName == null))
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (1));
				this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
			} else
			{
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object) (0));

				this.Adapter.DeleteCommand.Parameters[2].Value =
						((string) (Original_ViewFinderName));
			}

			ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;

			if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.DeleteCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public virtual int Insert(string ViewFinderName)
		{
			if ((ViewFinderName == null))
			{
				this.Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.InsertCommand.Parameters[0].Value = ((string) (ViewFinderName));
			}

			ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;

			if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.InsertCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[HelpKeyword("vs.data.TableAdapter")]
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public virtual int Update(string ViewFinderName,
								int      Original_ID,
								string   Original_ViewFinderName)
		{
			if ((ViewFinderName == null))
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string) (ViewFinderName));
			}

			this.Adapter.UpdateCommand.Parameters[1].Value = ((int) (Original_ID));

			if ((Original_ViewFinderName == null))
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (1));
				this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
			} else
			{
				this.Adapter.UpdateCommand.Parameters[2].Value = ((object) (0));

				this.Adapter.UpdateCommand.Parameters[3].Value =
						((string) (Original_ViewFinderName));
			}

			ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;

			if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
				!= ConnectionState.Open))
			{
				this.Adapter.UpdateCommand.Connection.Open();
			}

			try
			{
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();

				return returnValue;
			} finally
			{
				if ((previousConnectionState == ConnectionState.Closed))
				{
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	/// <summary>
	///   TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical
	///   Update scenarios
	/// </summary>
	[DesignerCategory("code")]
	[ToolboxItem(true)]
	[Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"
			+ "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[HelpKeyword("vs.data.TableAdapterManager")]
	public partial class TableAdapterManager : Component
	{
		private UpdateOrderOption _updateOrder;

		private DeviceTableAdapter _deviceTableAdapter;

		private DeviceColorProfileTableAdapter _deviceColorProfileTableAdapter;

		private DeviceShellTableAdapter _deviceShellTableAdapter;

		private DeviceSystemTableAdapter _deviceSystemTableAdapter;

		private DeviceTypesTableAdapter _deviceTypesTableAdapter;

		private DiveceViewFinderTableAdapter _diveceViewFinderTableAdapter;

		private bool _backupDataSetBeforeUpdate;

		private IDbConnection _connection;

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public UpdateOrderOption UpdateOrder
		{
			get
			{
				return this._updateOrder;
			}
			set
			{
				this._updateOrder = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DeviceTableAdapter DeviceTableAdapter
		{
			get
			{
				return this._deviceTableAdapter;
			}
			set
			{
				this._deviceTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DeviceColorProfileTableAdapter DeviceColorProfileTableAdapter
		{
			get
			{
				return this._deviceColorProfileTableAdapter;
			}
			set
			{
				this._deviceColorProfileTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DeviceShellTableAdapter DeviceShellTableAdapter
		{
			get
			{
				return this._deviceShellTableAdapter;
			}
			set
			{
				this._deviceShellTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DeviceSystemTableAdapter DeviceSystemTableAdapter
		{
			get
			{
				return this._deviceSystemTableAdapter;
			}
			set
			{
				this._deviceSystemTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DeviceTypesTableAdapter DeviceTypesTableAdapter
		{
			get
			{
				return this._deviceTypesTableAdapter;
			}
			set
			{
				this._deviceTypesTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"
				+ "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"
				+ "a", "System.Drawing.Design.UITypeEditor")]
		public DiveceViewFinderTableAdapter DiveceViewFinderTableAdapter
		{
			get
			{
				return this._diveceViewFinderTableAdapter;
			}
			set
			{
				this._diveceViewFinderTableAdapter = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public bool BackupDataSetBeforeUpdate
		{
			get
			{
				return this._backupDataSetBeforeUpdate;
			}
			set
			{
				this._backupDataSetBeforeUpdate = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		public IDbConnection Connection
		{
			get
			{
				if ((this._connection != null))
				{
					return this._connection;
				}

				if (((this._deviceTableAdapter              != null)
					&& (this._deviceTableAdapter.Connection != null)))
				{
					return this._deviceTableAdapter.Connection;
				}

				if (((this._deviceColorProfileTableAdapter              != null)
					&& (this._deviceColorProfileTableAdapter.Connection != null)))
				{
					return this._deviceColorProfileTableAdapter.Connection;
				}

				if (((this._deviceShellTableAdapter              != null)
					&& (this._deviceShellTableAdapter.Connection != null)))
				{
					return this._deviceShellTableAdapter.Connection;
				}

				if (((this._deviceSystemTableAdapter              != null)
					&& (this._deviceSystemTableAdapter.Connection != null)))
				{
					return this._deviceSystemTableAdapter.Connection;
				}

				if (((this._deviceTypesTableAdapter              != null)
					&& (this._deviceTypesTableAdapter.Connection != null)))
				{
					return this._deviceTypesTableAdapter.Connection;
				}

				if (((this._diveceViewFinderTableAdapter              != null)
					&& (this._diveceViewFinderTableAdapter.Connection != null)))
				{
					return this._diveceViewFinderTableAdapter.Connection;
				}

				return null;
			}
			set
			{
				this._connection = value;
			}
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		[Browsable(false)]
		public int TableAdapterInstanceCount
		{
			get
			{
				int count = 0;

				if ((this._deviceTableAdapter != null))
				{
					count = (count + 1);
				}

				if ((this._deviceColorProfileTableAdapter != null))
				{
					count = (count + 1);
				}

				if ((this._deviceShellTableAdapter != null))
				{
					count = (count + 1);
				}

				if ((this._deviceSystemTableAdapter != null))
				{
					count = (count + 1);
				}

				if ((this._deviceTypesTableAdapter != null))
				{
					count = (count + 1);
				}

				if ((this._diveceViewFinderTableAdapter != null))
				{
					count = (count + 1);
				}

				return count;
			}
		}

		/// <summary>
		///   Update rows in top-down order.
		/// </summary>
		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private int UpdateUpdatedRows(CameraMarketDataSet dataSet,
									List<DataRow>         allChangedRows,
									List<DataRow>         allAddedRows)
		{
			int result = 0;

			if ((this._deviceTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.Device.Select(null, null, DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._deviceTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			if ((this._deviceColorProfileTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.DeviceColorProfile.Select(null, null,
														DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._deviceColorProfileTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			if ((this._deviceShellTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.DeviceShell.Select(null, null, DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._deviceShellTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			if ((this._deviceSystemTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.DeviceSystem.Select(null, null, DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._deviceSystemTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			if ((this._deviceTypesTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.DeviceTypes.Select(null, null, DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._deviceTypesTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			if ((this._diveceViewFinderTableAdapter != null))
			{
				DataRow[] updatedRows =
						dataSet.DiveceViewFinder.Select(null, null,
														DataViewRowState.ModifiedCurrent);

				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);

				if (((updatedRows != null)
					&& (0         < updatedRows.Length)))
				{
					result = (result + this._diveceViewFinderTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}

			return result;
		}

		/// <summary>
		///   Insert rows in top-down order.
		/// </summary>
		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private int UpdateInsertedRows(CameraMarketDataSet dataSet, List<DataRow> allAddedRows)
		{
			int result = 0;

			if ((this._deviceTableAdapter != null))
			{
				DataRow[] addedRows = dataSet.Device.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._deviceTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			if ((this._deviceColorProfileTableAdapter != null))
			{
				DataRow[] addedRows =
						dataSet.DeviceColorProfile.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._deviceColorProfileTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			if ((this._deviceShellTableAdapter != null))
			{
				DataRow[] addedRows =
						dataSet.DeviceShell.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._deviceShellTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			if ((this._deviceSystemTableAdapter != null))
			{
				DataRow[] addedRows =
						dataSet.DeviceSystem.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._deviceSystemTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			if ((this._deviceTypesTableAdapter != null))
			{
				DataRow[] addedRows =
						dataSet.DeviceTypes.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._deviceTypesTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			if ((this._diveceViewFinderTableAdapter != null))
			{
				DataRow[] addedRows =
						dataSet.DiveceViewFinder.Select(null, null, DataViewRowState.Added);

				if (((addedRows != null)
					&& (0       < addedRows.Length)))
				{
					result = (result + this._diveceViewFinderTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}

			return result;
		}

		/// <summary>
		///   Delete rows in bottom-up order.
		/// </summary>
		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private int UpdateDeletedRows(CameraMarketDataSet dataSet, List<DataRow> allChangedRows)
		{
			int result = 0;

			if ((this._diveceViewFinderTableAdapter != null))
			{
				DataRow[] deletedRows =
						dataSet.DiveceViewFinder.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._diveceViewFinderTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			if ((this._deviceTypesTableAdapter != null))
			{
				DataRow[] deletedRows =
						dataSet.DeviceTypes.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._deviceTypesTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			if ((this._deviceSystemTableAdapter != null))
			{
				DataRow[] deletedRows =
						dataSet.DeviceSystem.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._deviceSystemTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			if ((this._deviceShellTableAdapter != null))
			{
				DataRow[] deletedRows =
						dataSet.DeviceShell.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._deviceShellTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			if ((this._deviceColorProfileTableAdapter != null))
			{
				DataRow[] deletedRows =
						dataSet.DeviceColorProfile.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._deviceColorProfileTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			if ((this._deviceTableAdapter != null))
			{
				DataRow[] deletedRows = dataSet.Device.Select(null, null, DataViewRowState.Deleted);

				if (((deletedRows != null)
					&& (0         < deletedRows.Length)))
				{
					result = (result + this._deviceTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}

			return result;
		}

		/// <summary>
		///   Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows)
		///   first
		/// </summary>
		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
		{
			if (((updatedRows          == null)
				|| (updatedRows.Length < 1)))
			{
				return updatedRows;
			}

			if (((allAddedRows         == null)
				|| (allAddedRows.Count < 1)))
			{
				return updatedRows;
			}

			List<DataRow> realUpdatedRows = new List<DataRow>();

			for (int i = 0; (i < updatedRows.Length); i = (i + 1))
			{
				DataRow row = updatedRows[i];

				if ((allAddedRows.Contains(row) == false))
				{
					realUpdatedRows.Add(row);
				}
			}

			return realUpdatedRows.ToArray();
		}

		/// <summary>
		///   Update all changes to the dataset.
		/// </summary>
		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public virtual int UpdateAll(CameraMarketDataSet dataSet)
		{
			if ((dataSet == null))
			{
				throw new ArgumentNullException("dataSet");
			}

			if ((dataSet.HasChanges() == false))
			{
				return 0;
			}

			if (((this._deviceTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._deviceTableAdapter.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			if (((this._deviceColorProfileTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._deviceColorProfileTableAdapter
													.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			if (((this._deviceShellTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._deviceShellTableAdapter.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			if (((this._deviceSystemTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._deviceSystemTableAdapter.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			if (((this._deviceTypesTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._deviceTypesTableAdapter.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			if (((this._diveceViewFinderTableAdapter != null)
				&& (this.MatchTableAdapterConnection(this._diveceViewFinderTableAdapter.Connection)
					== false)))
			{
				throw new
						ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"
										+ "r, должны использовать одинаковую строку подключения.");
			}

			IDbConnection workConnection = this.Connection;

			if ((workConnection == null))
			{
				throw new
						ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт"
											+ "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
			}

			bool workConnOpened = false;

			if (((workConnection.State & ConnectionState.Broken)
				== ConnectionState.Broken))
			{
				workConnection.Close();
			}

			if ((workConnection.State == ConnectionState.Closed))
			{
				workConnection.Open();
				workConnOpened = true;
			}

			IDbTransaction workTransaction = workConnection.BeginTransaction();

			if ((workTransaction == null))
			{
				throw new
						ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци"
											+ "и или текущее состояние не позволяет начать транзакцию.");
			}

			List<DataRow>     allChangedRows                        = new List<DataRow>();
			List<DataRow>     allAddedRows                          = new List<DataRow>();
			List<DataAdapter> adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();

			Dictionary<object, IDbConnection> revertConnections =
					new Dictionary<object, IDbConnection>();

			int     result        = 0;
			DataSet backupDataSet = null;

			if (this.BackupDataSetBeforeUpdate)
			{
				backupDataSet = new DataSet();
				backupDataSet.Merge(dataSet);
			}

			try
			{
				// ---- Prepare for update -----------
				//
				if ((this._deviceTableAdapter != null))
				{
					revertConnections.Add(this._deviceTableAdapter,
										this._deviceTableAdapter.Connection);

					this._deviceTableAdapter.Connection  = ((OleDbConnection) (workConnection));
					this._deviceTableAdapter.Transaction = ((OleDbTransaction) (workTransaction));

					if (this._deviceTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._deviceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
						adaptersWithAcceptChangesDuringUpdate.Add(this._deviceTableAdapter.Adapter);
					}
				}

				if ((this._deviceColorProfileTableAdapter != null))
				{
					revertConnections.Add(this._deviceColorProfileTableAdapter,
										this._deviceColorProfileTableAdapter.Connection);

					this._deviceColorProfileTableAdapter.Connection =
							((OleDbConnection) (workConnection));

					this._deviceColorProfileTableAdapter.Transaction =
							((OleDbTransaction) (workTransaction));

					if (this._deviceColorProfileTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._deviceColorProfileTableAdapter.Adapter.AcceptChangesDuringUpdate =
								false;

						adaptersWithAcceptChangesDuringUpdate
							.Add(this._deviceColorProfileTableAdapter.Adapter);
					}
				}

				if ((this._deviceShellTableAdapter != null))
				{
					revertConnections.Add(this._deviceShellTableAdapter,
										this._deviceShellTableAdapter.Connection);

					this._deviceShellTableAdapter.Connection = ((OleDbConnection) (workConnection));

					this._deviceShellTableAdapter.Transaction =
							((OleDbTransaction) (workTransaction));

					if (this._deviceShellTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._deviceShellTableAdapter.Adapter.AcceptChangesDuringUpdate = false;

						adaptersWithAcceptChangesDuringUpdate.Add(this._deviceShellTableAdapter
																	.Adapter);
					}
				}

				if ((this._deviceSystemTableAdapter != null))
				{
					revertConnections.Add(this._deviceSystemTableAdapter,
										this._deviceSystemTableAdapter.Connection);

					this._deviceSystemTableAdapter.Connection =
							((OleDbConnection) (workConnection));

					this._deviceSystemTableAdapter.Transaction =
							((OleDbTransaction) (workTransaction));

					if (this._deviceSystemTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._deviceSystemTableAdapter.Adapter.AcceptChangesDuringUpdate = false;

						adaptersWithAcceptChangesDuringUpdate.Add(this._deviceSystemTableAdapter
																	.Adapter);
					}
				}

				if ((this._deviceTypesTableAdapter != null))
				{
					revertConnections.Add(this._deviceTypesTableAdapter,
										this._deviceTypesTableAdapter.Connection);

					this._deviceTypesTableAdapter.Connection = ((OleDbConnection) (workConnection));

					this._deviceTypesTableAdapter.Transaction =
							((OleDbTransaction) (workTransaction));

					if (this._deviceTypesTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._deviceTypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;

						adaptersWithAcceptChangesDuringUpdate.Add(this._deviceTypesTableAdapter
																	.Adapter);
					}
				}

				if ((this._diveceViewFinderTableAdapter != null))
				{
					revertConnections.Add(this._diveceViewFinderTableAdapter,
										this._diveceViewFinderTableAdapter.Connection);

					this._diveceViewFinderTableAdapter.Connection =
							((OleDbConnection) (workConnection));

					this._diveceViewFinderTableAdapter.Transaction =
							((OleDbTransaction) (workTransaction));

					if (this._diveceViewFinderTableAdapter.Adapter.AcceptChangesDuringUpdate)
					{
						this._diveceViewFinderTableAdapter.Adapter.AcceptChangesDuringUpdate =
								false;

						adaptersWithAcceptChangesDuringUpdate.Add(this._diveceViewFinderTableAdapter
																	.Adapter);
					}
				}

				//
				//---- Perform updates -----------
				//
				if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete))
				{
					result =
							(result
							+ this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));

					result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
				} else
				{
					result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));

					result =
							(result
							+ this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
				}

				result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));

				//
				//---- Commit updates -----------
				//
				workTransaction.Commit();

				if ((0 < allAddedRows.Count))
				{
					DataRow[] rows = new DataRow[allAddedRows.Count];
					allAddedRows.CopyTo(rows);

					for (int i = 0; (i < rows.Length); i = (i + 1))
					{
						DataRow row = rows[i];
						row.AcceptChanges();
					}
				}

				if ((0 < allChangedRows.Count))
				{
					DataRow[] rows = new DataRow[allChangedRows.Count];
					allChangedRows.CopyTo(rows);

					for (int i = 0; (i < rows.Length); i = (i + 1))
					{
						DataRow row = rows[i];
						row.AcceptChanges();
					}
				}
			} catch (Exception ex)
			{
				workTransaction.Rollback();

				// ---- Restore the dataset -----------
				if (this.BackupDataSetBeforeUpdate)
				{
					Debug.Assert((backupDataSet != null));
					dataSet.Clear();
					dataSet.Merge(backupDataSet);
				} else
				{
					if ((0 < allAddedRows.Count))
					{
						DataRow[] rows = new DataRow[allAddedRows.Count];
						allAddedRows.CopyTo(rows);

						for (int i = 0; (i < rows.Length); i = (i + 1))
						{
							DataRow row = rows[i];
							row.AcceptChanges();
							row.SetAdded();
						}
					}
				}

				throw ex;
			} finally
			{
				if (workConnOpened)
				{
					workConnection.Close();
				}

				if ((this._deviceTableAdapter != null))
				{
					this._deviceTableAdapter.Connection =
							((OleDbConnection) (revertConnections[this._deviceTableAdapter]));

					this._deviceTableAdapter.Transaction = null;
				}

				if ((this._deviceColorProfileTableAdapter != null))
				{
					this._deviceColorProfileTableAdapter.Connection =
							((OleDbConnection)
								(revertConnections[this._deviceColorProfileTableAdapter]));

					this._deviceColorProfileTableAdapter.Transaction = null;
				}

				if ((this._deviceShellTableAdapter != null))
				{
					this._deviceShellTableAdapter.Connection =
							((OleDbConnection) (revertConnections[this._deviceShellTableAdapter]));

					this._deviceShellTableAdapter.Transaction = null;
				}

				if ((this._deviceSystemTableAdapter != null))
				{
					this._deviceSystemTableAdapter.Connection =
							((OleDbConnection) (revertConnections[this._deviceSystemTableAdapter]));

					this._deviceSystemTableAdapter.Transaction = null;
				}

				if ((this._deviceTypesTableAdapter != null))
				{
					this._deviceTypesTableAdapter.Connection =
							((OleDbConnection) (revertConnections[this._deviceTypesTableAdapter]));

					this._deviceTypesTableAdapter.Transaction = null;
				}

				if ((this._diveceViewFinderTableAdapter != null))
				{
					this._diveceViewFinderTableAdapter.Connection =
							((OleDbConnection)
								(revertConnections[this._diveceViewFinderTableAdapter]));

					this._diveceViewFinderTableAdapter.Transaction = null;
				}

				if ((0 < adaptersWithAcceptChangesDuringUpdate.Count))
				{
					DataAdapter[] adapters =
							new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];

					adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);

					for (int i = 0; (i < adapters.Length); i = (i + 1))
					{
						DataAdapter adapter = adapters[i];
						adapter.AcceptChangesDuringUpdate = true;
					}
				}
			}

			return result;
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected virtual void SortSelfReferenceRows(DataRow[]   rows,
													DataRelation relation,
													bool         childFirst)
		{
			Array.Sort<DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
		}

		[DebuggerNonUserCode()]
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
		{
			if ((this._connection != null))
			{
				return true;
			}

			if (((this.Connection   == null)
				|| (inputConnection == null)))
			{
				return true;
			}

			if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString,
							StringComparison.Ordinal))
			{
				return true;
			}

			return false;
		}

		/// <summary>
		///   Update Order Option
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		public enum UpdateOrderOption
		{
			InsertUpdateDelete = 0,

			UpdateInsertDelete = 1,
		}

		/// <summary>
		///   Used to sort self-referenced table's rows
		/// </summary>
		[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
		private class SelfReferenceComparer : object, IComparer<DataRow>
		{
			private DataRelation _relation;

			private int _childFirst;

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			internal SelfReferenceComparer(DataRelation relation, bool childFirst)
			{
				this._relation = relation;

				if (childFirst)
				{
					this._childFirst = -1;
				} else
				{
					this._childFirst = 1;
				}
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			private DataRow GetRoot(DataRow row, out int distance)
			{
				Debug.Assert((row != null));
				DataRow root = row;
				distance = 0;

				IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
				traversedRows[row] = row;

				DataRow parent = row.GetParentRow(this._relation, DataRowVersion.Default);

				for (
						;
						((parent                              != null)
						&& (traversedRows.ContainsKey(parent) == false));
				)
				{
					distance              = (distance + 1);
					root                  = parent;
					traversedRows[parent] = parent;

					parent =
							parent.GetParentRow(this._relation, DataRowVersion.Default);
				}

				if ((distance == 0))
				{
					traversedRows.Clear();
					traversedRows[row] = row;
					parent             = row.GetParentRow(this._relation, DataRowVersion.Original);

					for (
							;
							((parent                              != null)
							&& (traversedRows.ContainsKey(parent) == false));
					)
					{
						distance              = (distance + 1);
						root                  = parent;
						traversedRows[parent] = parent;

						parent =
								parent.GetParentRow(this._relation, DataRowVersion.Original);
					}
				}

				return root;
			}

			[DebuggerNonUserCode()]
			[GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
			public int Compare(DataRow row1, DataRow row2)
			{
				if (ReferenceEquals(row1, row2))
				{
					return 0;
				}

				if ((row1 == null))
				{
					return -1;
				}

				if ((row2 == null))
				{
					return 1;
				}

				int     distance1 = 0;
				DataRow root1     = this.GetRoot(row1, out distance1);

				int     distance2 = 0;
				DataRow root2     = this.GetRoot(row2, out distance2);

				if (ReferenceEquals(root1, root2))
				{
					return (this._childFirst * distance1.CompareTo(distance2));
				} else
				{
					Debug.Assert(((root1.Table  != null)
								&& (root2.Table != null)));

					if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)))
					{
						return -1;
					} else
					{
						return 1;
					}
				}
			}
		}
	}

	#pragma warning restore 1591
}
